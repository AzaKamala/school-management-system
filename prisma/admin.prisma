generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/admin-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String    @id @default(uuid())
  name         String
  databaseName String    @unique
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  isGlobal    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       AdminUser[]
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model AdminUser {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  roleId      String?
  assignedRole Role?     @relation(fields: [roleId], references: [id])
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  AuditLog AuditLog[]
}

model RefreshToken {
  id          String    @id @default(uuid())
  token       String    @unique
  userId      String
  adminUser   Boolean   @default(false)
  expiresAt   DateTime
  revoked     Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  status    String
  ip        String?
  userAgent String?
  metadata  String?
  createdAt DateTime @default(now())
  adminUser AdminUser? @relation(fields: [userId], references: [id], onDelete: SetNull)
}